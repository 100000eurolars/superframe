!function(e){function t(s){if(i[s])return i[s].exports;var r=i[s]={exports:{},id:s,loaded:!1};return e[s].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var i={};return t.m=e,t.c=i,t.p="",t(0)}([function(e,t){function i(e,t){var i;for(e.length=0,i=0;i<t.length;i++)e[i]=t[i]}if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");var s={childList:!0,attributes:!0,subtree:!0};AFRAME.registerComponent("aabb-collider",{schema:{collideNonVisible:{default:!1},debug:{default:!1},interval:{default:80},objects:{default:""}},init:function(){this.clearedIntersectedEls=[],this.boundingBox=new THREE.Box3,this.boxHelper=new THREE.BoxHelper,this.boxMax=new THREE.Vector3,this.boxMin=new THREE.Vector3,this.intersectedEls=[],this.objectEls=[],this.newIntersectedEls=[],this.prevCheckTime=void 0,this.previousIntersectedEls=[],this.setDirty=this.setDirty.bind(this),this.observer=new MutationObserver(this.setDirty),this.dirty=!0,this.hitStartEventDetail={intersectedEls:this.newIntersectedEls}},addEventListeners:function(){this.observer.observe(this.el.sceneEl,s),this.el.sceneEl.addEventListener("object3dset",this.setDirty),this.el.sceneEl.addEventListener("object3dremove",this.setDirty)},removeEventListeners:function(){this.observer.disconnect(),this.el.sceneEl.removeEventListener("object3dset",this.setDirty),this.el.sceneEl.removeEventListener("object3dremove",this.setDirty)},tick:function(e){var t,s,r=this.boundingBox,n=this.clearedIntersectedEls,o=this.intersectedEls,h=this.el,l=this.newIntersectedEls,c=this.objectEls,a=this.prevCheckTime,d=this.previousIntersectedEls;if(!(a&&e-a<this.data.interval)&&(this.prevCheckTime=e,s=h.getObject3D("mesh"))){for(this.dirty&&this.refreshObjects(),r.setFromObject(s),this.boxMin.copy(r.min),this.boxMax.copy(r.max),this.data.debug&&(this.boxHelper.setFromObject(s),this.boxHelper.parent||h.sceneEl.object3D.add(this.boxHelper)),i(d,o),o.length=0,t=0;t<c.length;t++)(this.data.collideNonVisible||c[t].getAttribute("visible"))&&this.isIntersecting(c[t])&&o.push(c[t]);for(l.length=0,t=0;t<o.length;t++)d.indexOf(o[t])===-1&&l.push(o[t]);for(n.length=0,t=0;t<d.length;t++)o.indexOf(d[t])===-1&&(d[t].hasAttribute("aabb-collider")||(d[t].emit("hitend"),d[t].emit("raycaster-intersected-cleared")),n.push(d[t]));for(t=0;t<l.length;t++)l[t].hasAttribute("aabb-collider")||(l[t].emit("hitstart"),l[t].emit("raycaster-intersected"));n.length&&(h.emit("hitend"),h.emit("raycaster-intersection-cleared")),l.length&&(h.emit("hitstart",this.hitStartEventDetail),h.emit("raycaster-intersection"))}},isIntersecting:function(){var e=new THREE.Box3;return function(t){var i,s,r;if(i=t.getObject3D("mesh"))return e.setFromObject(i),this.data.debug&&(i.boxHelper||(i.boxHelper=new THREE.BoxHelper(i,new THREE.Color(Math.random(),Math.random(),Math.random())),t.sceneEl.object3D.add(i.boxHelper)),i.boxHelper.setFromObject(i)),s=e.min,r=e.max,this.boxMin.x<=r.x&&this.boxMax.x>=s.x&&this.boxMin.y<=r.y&&this.boxMax.y>=s.y&&this.boxMin.z<=r.z&&this.boxMax.z>=s.z}}(),setDirty:function(){this.dirty=!0},refreshObjects:function(){var e=this.data;this.objectEls=e.objects?this.el.sceneEl.querySelectorAll(e.objects):this.el.sceneEl.children,this.dirty=!1}})}]);