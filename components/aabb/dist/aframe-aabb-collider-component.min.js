!function(e){function t(s){if(i[s])return i[s].exports;var r=i[s]={exports:{},id:s,loaded:!1};return e[s].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var i={};return t.m=e,t.c=i,t.p="",t(0)}([function(e,t){function i(e,t){var i;for(e.length=0,i=0;i<t.length;i++)e[i]=t[i]}if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");var s={childList:!0,attributes:!0,subtree:!0};AFRAME.registerComponent("aabb-collider",{schema:{collideNonVisible:{default:!1},debug:{default:!1},interval:{default:80},objects:{default:""}},init:function(){this.clearedIntersectedEls=[],this.boundingBox=new THREE.Box3,this.boxHelper=new THREE.BoxHelper,this.boxMax=new THREE.Vector3,this.boxMin=new THREE.Vector3,this.intersectedEls=[],this.objectEls=[],this.newIntersectedEls=[],this.prevCheckTime=void 0,this.previousIntersectedEls=[],this.setDirty=this.setDirty.bind(this),this.observer=new MutationObserver(this.setDirty),this.dirty=!0,this.hitStartEventDetail={intersectedEls:this.newIntersectedEls}},addEventListeners:function(){this.observer.observe(this.el.sceneEl,s),this.el.sceneEl.addEventListener("object3dset",this.setDirty),this.el.sceneEl.addEventListener("object3dremove",this.setDirty)},removeEventListeners:function(){this.observer.disconnect(),this.el.sceneEl.removeEventListener("object3dset",this.setDirty),this.el.sceneEl.removeEventListener("object3dremove",this.setDirty)},tick:function(e){var t,s,r,n=this.boundingBox,o=this.clearedIntersectedEls,h=this.intersectedEls,l=this.el,c=this.newIntersectedEls,a=this.objectEls,d=this.prevCheckTime,b=this.previousIntersectedEls;if(!(d&&e-d<this.data.interval)&&(this.prevCheckTime=e,r=l.getObject3D("mesh"))){for(this.dirty&&this.refreshObjects(),n.setFromObject(r),this.boxMin.copy(n.min),this.boxMax.copy(n.max),this.data.debug&&(this.boxHelper.setFromObject(r),this.boxHelper.parent||l.sceneEl.object3D.add(this.boxHelper)),i(b,h),h.length=0,s=0;s<a.length;s++)this.data.collideNonVisible||a[s].getAttribute("visible")?this.isIntersecting(a[s])&&h.push(a[s]):this.data.debug&&(t=a[s].getObject3D("mesh").boxHelper,t&&(l.sceneEl.object3D.remove(t),a[s].getObject3D("mesh").boxHelper=null));for(c.length=0,s=0;s<h.length;s++)b.indexOf(h[s])===-1&&c.push(h[s]);for(o.length=0,s=0;s<b.length;s++)h.indexOf(b[s])===-1&&(b[s].hasAttribute("aabb-collider")||(b[s].emit("hitend"),b[s].emit("raycaster-intersected-cleared")),o.push(b[s]));for(s=0;s<c.length;s++)c[s].hasAttribute("aabb-collider")||(c[s].emit("hitstart"),c[s].emit("raycaster-intersected"));o.length&&(l.emit("hitend"),l.emit("raycaster-intersection-cleared")),c.length&&(l.emit("hitstart",this.hitStartEventDetail),l.emit("raycaster-intersection"))}},isIntersecting:function(){var e=new THREE.Box3;return function(t){var i,s,r;if(i=t.getObject3D("mesh"))return e.setFromObject(i),this.data.debug&&(i.boxHelper||(i.boxHelper=new THREE.BoxHelper(i,new THREE.Color(Math.random(),Math.random(),Math.random())),t.sceneEl.object3D.add(i.boxHelper)),i.boxHelper.setFromObject(i)),s=e.min,r=e.max,this.boxMin.x<=r.x&&this.boxMax.x>=s.x&&this.boxMin.y<=r.y&&this.boxMax.y>=s.y&&this.boxMin.z<=r.z&&this.boxMax.z>=s.z}}(),setDirty:function(){this.dirty=!0},refreshObjects:function(){var e=this.data;this.objectEls=e.objects?this.el.sceneEl.querySelectorAll(e.objects):this.el.sceneEl.children,this.dirty=!1}})}]);